// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mathsvc.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MathOpRequest struct {
	A                    float64  `protobuf:"fixed64,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    float64  `protobuf:"fixed64,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MathOpRequest) Reset()         { *m = MathOpRequest{} }
func (m *MathOpRequest) String() string { return proto.CompactTextString(m) }
func (*MathOpRequest) ProtoMessage()    {}
func (*MathOpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c63e992315a488f, []int{0}
}

func (m *MathOpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MathOpRequest.Unmarshal(m, b)
}
func (m *MathOpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MathOpRequest.Marshal(b, m, deterministic)
}
func (m *MathOpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MathOpRequest.Merge(m, src)
}
func (m *MathOpRequest) XXX_Size() int {
	return xxx_messageInfo_MathOpRequest.Size(m)
}
func (m *MathOpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MathOpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MathOpRequest proto.InternalMessageInfo

func (m *MathOpRequest) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *MathOpRequest) GetB() float64 {
	if m != nil {
		return m.B
	}
	return 0
}

type MathOpReply struct {
	V                    float64  `protobuf:"fixed64,1,opt,name=v,proto3" json:"v,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MathOpReply) Reset()         { *m = MathOpReply{} }
func (m *MathOpReply) String() string { return proto.CompactTextString(m) }
func (*MathOpReply) ProtoMessage()    {}
func (*MathOpReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c63e992315a488f, []int{1}
}

func (m *MathOpReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MathOpReply.Unmarshal(m, b)
}
func (m *MathOpReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MathOpReply.Marshal(b, m, deterministic)
}
func (m *MathOpReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MathOpReply.Merge(m, src)
}
func (m *MathOpReply) XXX_Size() int {
	return xxx_messageInfo_MathOpReply.Size(m)
}
func (m *MathOpReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MathOpReply.DiscardUnknown(m)
}

var xxx_messageInfo_MathOpReply proto.InternalMessageInfo

func (m *MathOpReply) GetV() float64 {
	if m != nil {
		return m.V
	}
	return 0
}

func (m *MathOpReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*MathOpRequest)(nil), "pb.MathOpRequest")
	proto.RegisterType((*MathOpReply)(nil), "pb.MathOpReply")
}

func init() { proto.RegisterFile("mathsvc.proto", fileDescriptor_2c63e992315a488f) }

var fileDescriptor_2c63e992315a488f = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2c, 0xc9,
	0x28, 0x2e, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2, 0xe6,
	0xe2, 0xf5, 0x4d, 0x2c, 0xc9, 0xf0, 0x2f, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2,
	0xe1, 0x62, 0x4c, 0x94, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0c, 0x62, 0x4c, 0x04, 0xf1, 0x92, 0x24,
	0x98, 0x20, 0xbc, 0x24, 0x25, 0x5d, 0x2e, 0x6e, 0x98, 0xe2, 0x82, 0x9c, 0x4a, 0x90, 0x64, 0x19,
	0x4c, 0x69, 0x99, 0x90, 0x00, 0x17, 0x73, 0x6a, 0x51, 0x11, 0x58, 0x31, 0x67, 0x10, 0x88, 0x69,
	0x74, 0x8e, 0x89, 0x8b, 0x05, 0xa4, 0x5e, 0x48, 0x8f, 0x8b, 0xcd, 0x25, 0xb3, 0x2c, 0x33, 0x25,
	0x55, 0x48, 0x50, 0xaf, 0x20, 0x49, 0x0f, 0xc5, 0x42, 0x29, 0x7e, 0x64, 0xa1, 0x82, 0x9c, 0x4a,
	0x25, 0x06, 0x21, 0x6d, 0x2e, 0x66, 0xdf, 0xc4, 0x0a, 0x12, 0x14, 0x67, 0xe6, 0x11, 0xa9, 0xd8,
	0x80, 0x8b, 0xc3, 0xb7, 0x34, 0xa7, 0x24, 0x13, 0xe4, 0x7c, 0xa2, 0x8d, 0x0f, 0xc8, 0x2f, 0x27,
	0xde, 0xf8, 0xe0, 0xd2, 0xa4, 0x92, 0xa2, 0xc4, 0xe4, 0x12, 0xe2, 0x8d, 0x0f, 0x2e, 0xcd, 0x25,
	0x4e, 0x71, 0x12, 0x1b, 0x38, 0xde, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x82, 0x63,
	0xd4, 0xc8, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MathClient is the client API for Math service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MathClient interface {
	// Divide two integers, a/b
	Divide(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error)
	// Max two integers, returns the greater value of a and b
	Max(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error)
	// Min two integers, returns the lesser value of a and b
	Min(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error)
	// Multiply two integers, a*b
	Multiply(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error)
	// Pow two integers, a^b
	Pow(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error)
	// Subtract two integers, a-b
	Subtract(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error)
	// Sums two integers. a+b
	Sum(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error)
}

type mathClient struct {
	cc *grpc.ClientConn
}

func NewMathClient(cc *grpc.ClientConn) MathClient {
	return &mathClient{cc}
}

func (c *mathClient) Divide(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error) {
	out := new(MathOpReply)
	err := c.cc.Invoke(ctx, "/pb.Math/Divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathClient) Max(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error) {
	out := new(MathOpReply)
	err := c.cc.Invoke(ctx, "/pb.Math/Max", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathClient) Min(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error) {
	out := new(MathOpReply)
	err := c.cc.Invoke(ctx, "/pb.Math/Min", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathClient) Multiply(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error) {
	out := new(MathOpReply)
	err := c.cc.Invoke(ctx, "/pb.Math/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathClient) Pow(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error) {
	out := new(MathOpReply)
	err := c.cc.Invoke(ctx, "/pb.Math/Pow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathClient) Subtract(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error) {
	out := new(MathOpReply)
	err := c.cc.Invoke(ctx, "/pb.Math/Subtract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathClient) Sum(ctx context.Context, in *MathOpRequest, opts ...grpc.CallOption) (*MathOpReply, error) {
	out := new(MathOpReply)
	err := c.cc.Invoke(ctx, "/pb.Math/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MathServer is the server API for Math service.
type MathServer interface {
	// Divide two integers, a/b
	Divide(context.Context, *MathOpRequest) (*MathOpReply, error)
	// Max two integers, returns the greater value of a and b
	Max(context.Context, *MathOpRequest) (*MathOpReply, error)
	// Min two integers, returns the lesser value of a and b
	Min(context.Context, *MathOpRequest) (*MathOpReply, error)
	// Multiply two integers, a*b
	Multiply(context.Context, *MathOpRequest) (*MathOpReply, error)
	// Pow two integers, a^b
	Pow(context.Context, *MathOpRequest) (*MathOpReply, error)
	// Subtract two integers, a-b
	Subtract(context.Context, *MathOpRequest) (*MathOpReply, error)
	// Sums two integers. a+b
	Sum(context.Context, *MathOpRequest) (*MathOpReply, error)
}

// UnimplementedMathServer can be embedded to have forward compatible implementations.
type UnimplementedMathServer struct {
}

func (*UnimplementedMathServer) Divide(ctx context.Context, req *MathOpRequest) (*MathOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}
func (*UnimplementedMathServer) Max(ctx context.Context, req *MathOpRequest) (*MathOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Max not implemented")
}
func (*UnimplementedMathServer) Min(ctx context.Context, req *MathOpRequest) (*MathOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Min not implemented")
}
func (*UnimplementedMathServer) Multiply(ctx context.Context, req *MathOpRequest) (*MathOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (*UnimplementedMathServer) Pow(ctx context.Context, req *MathOpRequest) (*MathOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pow not implemented")
}
func (*UnimplementedMathServer) Subtract(ctx context.Context, req *MathOpRequest) (*MathOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtract not implemented")
}
func (*UnimplementedMathServer) Sum(ctx context.Context, req *MathOpRequest) (*MathOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}

func RegisterMathServer(s *grpc.Server, srv MathServer) {
	s.RegisterService(&_Math_serviceDesc, srv)
}

func _Math_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Math/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Divide(ctx, req.(*MathOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Math_Max_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Max(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Math/Max",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Max(ctx, req.(*MathOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Math_Min_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Min(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Math/Min",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Min(ctx, req.(*MathOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Math_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Math/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Multiply(ctx, req.(*MathOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Math_Pow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Pow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Math/Pow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Pow(ctx, req.(*MathOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Math_Subtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Subtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Math/Subtract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Subtract(ctx, req.(*MathOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Math_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Math/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Sum(ctx, req.(*MathOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Math_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Math",
	HandlerType: (*MathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Divide",
			Handler:    _Math_Divide_Handler,
		},
		{
			MethodName: "Max",
			Handler:    _Math_Max_Handler,
		},
		{
			MethodName: "Min",
			Handler:    _Math_Min_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _Math_Multiply_Handler,
		},
		{
			MethodName: "Pow",
			Handler:    _Math_Pow_Handler,
		},
		{
			MethodName: "Subtract",
			Handler:    _Math_Subtract_Handler,
		},
		{
			MethodName: "Sum",
			Handler:    _Math_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mathsvc.proto",
}
